module bitaddertb;
    initial begin
        $dumpfile("bitaddertb.vcd");
        $dumpvars(0, bitaddertb);
    end
    // Inputs
    reg [1023:0] in1;
    reg [1023:0] in2;
    reg clk;
    // Outputs
    wire [1023:0] out;
    wire carry_out;  
    wire[1023:0]carry;

    // Instantiate the Unit Under Test (UUT)
    adder_seq uut (
        .clk(clk),
        .carry_out(carry_out),
        .out(out),
        .in1(in1), 
        .in2(in2)
    );
    //always #5 clk = ~clk;
initial begin: initial_block
        begin: my_for_block
           in
           #100;
           in
           $display("in1:%d, in2:%d",in1,in2);   
        end 
      $finish;
end

    genvar i;
   generate 
   for(i=0;i<1024;i=i+1)
     begin: generate_bitaddertb
   if(i==0) 
  half_adder f(in1[0],in2[0],out[0],carry[0]);
   else
  full_adder f(in1[i],in2[i],carry[i-1],out[i],carry[i]);
     end
  assign carry_out = carry[1023];
   endgenerate
    
endmodule



